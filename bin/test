#!/usr/bin/env python3
import sys
import os
import glob
import re
import subprocess
import resource
import platform
import json

def memory_usage():
    ru_maxrss = resource.getrusage(resource.RUSAGE_CHILDREN)[2]
    return ru_maxrss / 1024 / 1024

def usage():
    print("Usage: {} TASK_NAME".format(sys.argv[0]))
    sys.exit(1)

if len(sys.argv) < 2:
    usage()

task_name = sys.argv[1]
test_filter = sys.argv[2] if len(sys.argv) >= 3 else None

tasks_dir = os.path.join(os.path.dirname(__file__), '..', 'tasks')
task_dir = os.path.join(tasks_dir, task_name)
task_tests_dir = os.path.join(task_dir, 'tests')
task_settings_file_name = os.path.join(task_dir, 'settings.json')

with open(task_settings_file_name) as task_settings_file:
    task_settings = json.loads(task_settings_file.read())

compile_cmd = {
    'python34': None,
    'java8': ['/usr/bin/env', 'javac', task_settings['file']]
}[task_settings['platform']];

execute_cmd = {
    'python34': ['/usr/bin/env', 'python3', task_settings['file']],
    'java8': ['/usr/bin/env', 'java', '-Xmx256M', '-Xss64M', re.sub(r'\.java$', '', task_settings['file'])]
}[task_settings['platform']];

if compile_cmd:
    compile_process = subprocess.Popen(compile_cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, cwd=task_dir)
    try:
        compile_process.wait(timeout=30)
    except subprocess.TimeoutExpired as e:
        print("Task \"{}\": Compilation error".format(task_name))
        sys.exit(1)
    if compile_process.returncode > 0:
        print("Task \"{}\": Compilation error".format(task_name))
        sys.exit(1)

for reference_output_file_name in glob.glob(os.path.join(task_tests_dir, '*.a')):
    input_file_name = re.sub(r'\.a$', '', reference_output_file_name)
    test_name = os.path.basename(input_file_name)

    verbose = False
    if test_filter:
        if test_filter != test_name:
            continue
        verbose = True

    test_process = subprocess.Popen(execute_cmd, stdin=open(input_file_name), stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=task_dir)

    try:
        output, errors = test_process.communicate(timeout=task_settings['limits']['time'])
    except subprocess.TimeoutExpired as e:
        test_process.kill()
        print("Task \"{}\" Test \"{}\": Time Limit Exceeded".format(task_name, test_name))
        continue

    if test_process.returncode > 0:
        print("Task \"{}\" Test \"{}\": Runtime Error".format(task_name, test_name))
        continue

    if memory_usage() >= task_settings['limits']['memory']:
        print("Task \"{}\" Test \"{}\": Memory Limit Exceeded".format(task_name, test_name))
        continue

    output = list(map(lambda l: l.strip(), output.decode('utf-8').strip().split("\n")))

    with open(reference_output_file_name) as reference_output_file:
        reference_output = list(map(lambda l: l.strip(), reference_output_file.readlines()))

    if output != reference_output:
        if verbose:
            for i in range(len(output)):
                if output[i] != reference_output[i]:
                    print("Row \"{}\": Expected \"{}\" got \"{}\"".format(i, reference_output[i], output[i]))
        print("Task \"{}\" Test \"{}\": Wrong Answer".format(task_name, test_name))
        continue

    print("Task \"{}\" Test \"{}\": OK".format(task_name, test_name))
